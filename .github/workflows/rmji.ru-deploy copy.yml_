name: publish docker image

on:
  push:
    branches: ["master"]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  REGISTRY_USER: PGirich
  IMAGE_NAME: pgirich/rmji:latest
  SSH: ssh ${{ secrets.VPS_LOGIN }}@${{ secrets.VPS_IP }} -i ~/.ssh/id_rsa
  CERT_PATH: /etc/nginx/nginx_secrets/live/rmji
  DHP_PATH: /etc/nginx/nginx_secrets/dhparams
  CONF_PATH: /etc/nginx/user_conf.d

jobs:
  certbot:
    name: publish certbot
    runs-on: ubuntu-latest

    steps:
      - name: ${{ github.actor }} run checkout for ${{ github.repository}}
        uses: actions/checkout@v4

      - name: Install SSH key of VPS
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.VPS_KEY }}" > ~/.ssh/id_rsa
          cat ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_IP }} > ~/.ssh/known_hosts

      - name: Install certbot artefacts
        run: |
          ${{ env.SSH }} "sudo mkdir -p -v ${{ env.CONF_PATH }} || exit 0"
          ${{ env.SSH }} "sudo mkdir -p -v ${{ env.CERT_PATH }} || exit 0"
          ${{ env.SSH }} "sudo mkdir -p -v ${{ env.DHP_PATH }} || exit 0"
          ${{ env.SSH }} "sudo touch ${{ env.CERT_PATH }}/fullchain.pem || exit 0"
          ${{ env.SSH }} "sudo touch ${{ env.CERT_PATH }}/privkey.pem || exit 0"
          ${{ env.SSH }} "sudo touch ${{ env.CERT_PATH }}/chain.pem || exit 0"
          ${{ env.SSH }} "sudo touch ${{ env.DHP_PATH }}/dhparam.pem || exit 0"
          ${{ env.SSH }} "sudo chmod 777 ${{ env.CERT_PATH }}/fullchain.pem"
          ${{ env.SSH }} "sudo chmod 777 ${{ env.CERT_PATH }}/privkey.pem"
          ${{ env.SSH }} "sudo chmod 777 ${{ env.CERT_PATH }}/chain.pem"
          ${{ env.SSH }} "sudo chmod 777 ${{ env.DHP_PATH }}/dhparam.pem"
          ${{ env.SSH }} "sudo echo '. ' >> ${{ env.CERT_PATH }}/fullchain.pem"
          ${{ env.SSH }} "echo '. ' >> ${{ env.CERT_PATH }}/privkey.pem || exit 0"
          ${{ env.SSH }} "echo '. ' >> ${{ env.CERT_PATH }}/chain.pem || exit 0"
          ${{ env.SSH }} "echo '. ' >> ${{ env.DHP_PATH }}/dhparam.pem || exit 0"
          ${{ env.SSH }} "sudo rm -f ${{ env.CONF_PATH }}/nginx.conf || exit 0"
          ${{ env.SSH }} "sudo touch ${{ env.CONF_PATH }}/nginx.conf || exit 0"
          ${{ env.SSH }} "sudo chmod 777 ${{ env.CONF_PATH }}/nginx.conf"
          ${{ env.SSH }} "sudo echo 'server { \
              listen 443 ssl default_server reuseport; \
              listen [::]:443 ssl default_server reuseport; \
              server_name rmji.ru www.rmji.ru; \
              ssl_certificate /etc/letsencrypt/live/rmji/fullchain.pem; \
              ssl_certificate_key /etc/letsencrypt/live/rmji/privkey.pem; \
              ssl_trusted_certificate /etc/letsencrypt/live/rmji/chain.pem; \
              ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem; \
              return 200; \
              add_header Content-Type text/plain; \
            }' >> /etc/nginx/user_conf.d/nginx.conf"

      - name: Kill containers on VPS
        run: |
          ${{ env.SSH }} "sudo docker rm -f certbot || exit 0"

      - name: Login to registry from VPS - ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}
        run: |
          ${{ env.SSH }} "sudo docker login ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }} -u ${{ env.REGISTRY_USER }} -p ${{ secrets.GHCR_PAT }}"

      - name: Pull certbot to VPS
        run: |
          ${{ env.SSH }} "sudo docker pull jonasal/nginx-certbot:latest"

      - name: Create certbot container on VPS
        run: |
          ${{ env.SSH }} "sudo docker create -it -p 80:80 -p 443:443 \
            --env CERTBOT_EMAIL=petr.girich@yandex.ru \
            -v /etc/nginx/nginx_secrets:/etc/letsencrypt \
            -v ${{ env.CONF_PATH }}:/etc/nginx/user_conf.d:ro \
            --name certbot --pull never \
            jonasal/nginx-certbot"

      - name: Create certbot container on VPS
        run: |
          ${{ env.SSH }} "sudo docker container start -a certbot"

  publish:
    name: publish rmji.ru app
    runs-on: ubuntu-latest
    needs: certbot

    steps:
      - name: Error
        run: |
          exit -1

      - name: ${{ github.actor }} run checkout for ${{ github.repository}}
        uses: actions/checkout@v4

      - name: Install SSH key of VPS
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.VPS_KEY }}" > ~/.ssh/id_rsa
          cat ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_IP }} > ~/.ssh/known_hosts

      - name: Build the Docker image - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        run: |
          docker build . --file Dockerfile --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Login to GitHub Container Registry - ${{ env.REGISTRY }}
        run: |
          docker login ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }} -u ${{ env.REGISTRY_USER }} -p ${{ secrets.GHCR_PAT }}

      - name: Push the Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Kill containers on VPS
        run: |
          ${{ env.SSH }} "sudo docker rm -f rmji || exit 0"

      - name: Login to registry from VPS - ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}
        run: |
          ${{ env.SSH }} "sudo docker login ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }} -u ${{ env.REGISTRY_USER }} -p ${{ secrets.GHCR_PAT }}"

      - name: Pull app to VPS
        run: |
          ${{ env.SSH }} "sudo docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

      - name: Run app image on VPS
        run: |
          ${{ env.SSH }} "sudo docker run --name rmji ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
